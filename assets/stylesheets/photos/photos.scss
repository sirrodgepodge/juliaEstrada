//// maybe use later

$numSlices: 6;
$maxPhotos: 11;

$widthHeightRatioVert: 35.845/53.3;
$widthHeightRatioHoriz: 58.155/53.3;
$wideVertRatio: 35.845/58.155;

@mixin photosSizer($mobile-container-margin, $mobile-photos-margin, $mobile-vert-width) {
    #photos {
        padding: #{2.8235 * $mobile-container-margin} 0 0;
        margin: 0 $mobile-container-margin #{$mobile-container-margin * 2.8235 - $mobile-photos-margin * 2 * 1.033333333333};
        .float-fold {
            margin: 0 $mobile-photos-margin #{$mobile-photos-margin * 2 * 1.033333333333};

            // mobile view
            $mobile-height: $mobile-vert-width * 1/$widthHeightRatioVert;
            height: $mobile-height;
            &.vertical {
                width: $mobile-height * $widthHeightRatioVert;
            }
            &.horizontal {
                width: $mobile-height * $widthHeightRatioHoriz;
            }
        }
    }
}

@include photosSizer(2.125vw, 2vw, 31.7vw);
@media (min-width: 768px) {
  @include photosSizer(2.125vw, 1.5vw, 33.19vw * 1/2);
}
@media (min-width: 1350px) {
  @include photosSizer(2.125vw, 1.5vw, 33.19vw * 1/2.75);
}
@media (min-width: 2000px) {
  @include photosSizer(2.125vw, 1.5vw, 33.19vw * 1/4);
}

#photos {
  overflow: hidden;
  text-align: center;
  border-top: 1px solid #dfe7ed;
  z-index: 0;
  line-height: 0;

  .float-fold {
    /////// sizing and positioning
    @include vend(transform, translateZ(0));
    display: inline-block;
    text-align: center;
    cursor: pointer;

    // // biggest screen view
    //   margin: 2% 0 0 2.52%;
    //   &.vertical {
    //     height: 300px;
    //     width: 16%;
    //     max-width: 200px;
    //   }
    //   &.horizontal {
    //     height: 300px;
    //     width: 31.75%;
    //     max-width: 395px;
    //   }

    &:before {
      @include vend(box-shadow, 1px 2px 6px 0 rgba(0,0,0,0.4));
      content: "";
      position: absolute;
      display: block;
      height: 100%;
      width: 100%;
      opacity: 0;
    }

    /////// animation-related
    @include vendVal(background-image, linear-gradient(top, #000 30%, rgba(0,0,0,0) 48%));
    opacity: 0;
    background-size: 200%;
    background-repeat: no-repeat;

    .slice {
       @include vend(perspective, 3000px);
       -webkit-backface-visibility: hidden;
       width: 100%;
       height: 100%;
       background-repeat: no-repeat, no-repeat;
       background-blend-mode: overlay;
    }

    @for $i from 1 to ($numSlices + 1) {
      & > .total-slices-#{$i} {
        height: calc(#{100%/$i + 0.10%} + 1.5px);
      }
      // adjust slice height based on total number of slices
      .total-slices-#{$i} {
        background-size: auto #{100% * $i};
      }
    }
  }

  &.triggered {

    .float-fold {
      @include vend(transform, translate3d(0,0,0));
      opacity: 1;
      background-position: 0 -4%;

      &:before {
        opacity: 1;
      }

      .slice {
         &:not(.slice-1) {
           @include vend(transform, translate3d(0, calc(100% - .5px),0));
         }
      }

      @for $i from 1 to ($numSlices + 1) {
        // delay folding for "peeling" effect
        .slice-#{$i} {
          @include vend(transition-delay, (#{$i*50ms}, 0s));
        }

        @for $j from 1 to ($i + 1) {
          // adjust background position based on slice index
          @if $j == 1 {
            .total-slices-#{$i}.slice-#{$j} {
              background-position: center 0%, center #{-100% + 100%/($i - 1)};
            }
          } @else {
            .total-slices-#{$i}.slice-#{$j} {
              background-position: center #{100%/($i - 1)*$j - 100%/($i - 1)}, center #{-100% + 100%/($i - 1)*$j - 100%/($i - 1)}; // scooch image down so that it's consistent with slice above/below
            }
          }
        }
      }
    }
  }
  &:not(.triggered) {
    .float-fold {
      @include vend(transform, translate3d(5%, -3%, 0));
      background-position: -1% 0;

      // say how big you would like tilt to be
      $tilt-deg: 17deg;

      // adjust background position based on slice index
      $transform-pct: 91.3%;
      // $curr-tilt-deg: 0deg;

      @for $i from 2 to ($numSlices + 1) {
        // adjust for total tilt
        // $curr-tilt-deg: $curr-tilt-deg + $tilt-deg;
        // $curr-tilt-cos: cos($curr-tilt-deg);

        // adjust background position based on slice index
        // $curr-transform-pct: $transform-pct * $curr-tilt-cos;
        // @debug $curr-transform-pct;

        @if $i > 1 {
          .slice-#{$i} {
            @include vend(transform, translate3d(0.5%, $transform-pct, 0) scale(1.004, .9) rotateX(#{$tilt-deg}) skewX(3deg));
          }
        }

        @for $j from 1 to ($i + 1) {
          // delay folding for "peeling" effect
          .total-slices-#{$i}.slice-#{$j} {
            @include vend(transition-delay, (#{($i - $j)*50ms}, 0s));
          }

          // adjust background position based on slice index
          @if $j == 1 {
            .total-slices-#{$i}.slice-#{$j} {
              background-position: center 0%, center 0%;
            }
          } @else {
            .total-slices-#{$i}.slice-#{$j} {
              background-position: center #{100%/($i - 1)*$j - 100%/($i - 1)}, center #{100%/($i - 1)*$j - 100%/($i - 1)}; // scooch image down so that it's consistent with slice above/below
            }
          }
        }
      }
    }
  }
  // for chaining transitions
  $close-gap: 0.45s;

  // needs to happen after/before the rest
  $opacity-duration: 0.5s;

  @for $i from 0 to ($maxPhotos + 1) {
    &.triggered {
      @if $i == 0 {
        .float-fold-0 {
          @include vend(transition, (transform 0.75s ease-in-out 0s, opacity 0.675s ease-in 0.075s, background-position 0.65s linear 0.1s));
          &:before {
            @include vend(transition, opacity $opacity-duration linear 0.75s);
          }
          .slice {
            @include vend(transition, (transform 0.55s linear 0s, background-position 0.65s linear 0.1s));
          }
        }
      } @else {
        .float-fold-#{$i} {
          @include vend(transition, (transform 0.75s ease-in-out #{$i * (0.75s - $close-gap) + 0s }, opacity 0.675s ease-in #{$i * (0.75s - $close-gap) + 0.075s}, background-position 0.65s linear #{$i * (0.75s - $close-gap) + 0.1s}));
          &:before {
            @include vend(transition, opacity $opacity-duration linear #{$i * (0.75s - $close-gap) + 0.75s});
          }
          .slice {
            @include vend(transition, (transform 0.55s linear #{$i * (0.75s - $close-gap) + 0s}, background-position 0.65s linear #{$i *(0.75s - $close-gap) + 0.1s}));
          }
        }
      }
    }
    @for $j from 0 to ($i + 1) {
      // &:not(.triggered) {
      //   .float-fold-#{$j}.float-fold-total-#{$i} {
      //     @include vend(transition, (transform 0.75s ease-in-out #{($i - $j) * (0.75s - $close-gap) + $opacity-duration}, opacity .675s ease-in #{($i - $j) * (0.75s - $close-gap) + $opacity-duration}, background-position 0.65s linear #{($i - $j) * (0.75s - $close-gap) + $opacity-duration}));
      //     &:before {
      //       @include vend(transition, opacity $opacity-duration linear #{($i - $j) * (0.75s - $close-gap) + 0s});
      //     }
      //     .slice {
      //       @include vend(transition, (transform 0.5s linear #{($i - $j)* (0.75s - $close-gap) + $opacity-duration}, background-position 0.65s linear #{($i - $j) * (0.75s - $close-gap) + $opacity-duration}));
      //     }
      //   }
      // }
      .float-fold-#{$j}.float-fold-total-#{$i} {
        z-index: #{$i - $j};
      }
    }
  }
}

@import 'photos/modal/modal';
